
require:
   quaint-autoprefixer
   quaint-google-fonts
   quaint-nav
   quaint-sass
   path
   fs
   deepmerge

provide:
   defaults

min-template = """
doctype :: html
html %
  head %
    title %
      meta::title !! Untitled
    meta %
      http-equiv = Content-type
      content = text/html
      charset = UTF-8
    meta %
      name = viewport
      content = width=device-width
      initial-scale = 1
  body % {body}
"""

nav-template = """
template :: @minimal
lnnav :: dump!
.container % {body}
"""

defaults = {
   use-nav = true
   use-side = true
   fonts = {
      body = "sans"
      nav = "$font-body"
      mnav = "$font-nav"
      header = "$font-body"
      title = "$font-header"
      pre = "Monospace"
      code = "$font-pre"
   }
   "font-sizes" = {
      body = "20px"
      nav = "$font-size-body"
      mnav = "$font-size-body"
      dropdown = "$font-size-body"
      caret = "$font-size-nav * 0.8"
   }
   borders = {
      nav = "2px solid darken($background-nav, 20%)"
      "nav-dropdown" = "10px solid $background-nav-dropdown"
   }
   widths = {
      body = "700px"
      nav = "$width-body + 2 * $padding-body"
      side = "300px"
   }
   heights = {
      nav = "50px"
      mnav = "$height-nav"
   }
   paddings = {
      body = "10px"
      nav = "$padding-body"
      td = "5px"
   }
   backgrounds = {
      body = "#fff"
      nav = "$background-body"
      "nav-select" = "tweak($background-nav, 20%)"
      "nav-dropdown" = "tweak($background-nav, 10%)"
      "nav-dropdown-select" = "tweak($background-nav-dropdown, 10%)"
      pre = "$background-body"
      code = "$background-body"
      table = "tweak($background-body, 10%)"
      "table-odd" = "tweak($background-table, 5%)"
      "table-header" = "tweak($background-table, 20%)"
   }
   colors = {
      body = "tweak($background-body, 85%)"
      nav = "bwtext($background-nav)"
      "nav-select" = "bwtext($background-nav-select)"
      "nav-dropdown" = "bwtext($background-nav-dropdown)"
      "nav-dropdown-select" = "bwtext($background-nav-dropdown-select)"
      link = "contrasting($background-body, #aaf, auto)"
      "link-visited" = "contrasting($background-body, #f8f, auto)"
      pre = "bwtext($background-pre)"
      code = "bwtext($background-code)"
      table = "bwtext($background-table)"
      "table-odd" = "bwtext($background-table-odd)"
      "table-header" = "bwtext($background-table-header)"
      header = "$color-body"
      title = "$color-header"
   }
}

install{@, _options} =

   options = deepmerge{defaults, _options}

   if options.font:
      options.fonts.body = options.font

   variables = {
      "use-nav" => options.use-nav
   }

   google-fonts = options.google-fonts or {}

   {.background, .color, "font-size"
    .border, .padding, .margin, .width, .height} each type ->
      items{options['{type}s'] or {=}} each {location, value} ->
         variables['{type}-{location}'] = value

   items{options.fonts} each {location, _name} ->
      name = match _name:
         R"^g:([^:]+)(:.*)?"! {_, family, settings} ->
            google-fonts.push{family + [settings or ""]}
            family
         else ->
            _name
      variables['font-{location}'] = name

   quaint-autoprefixer{@}
   quaint-google-fonts{@, fonts = google-fonts}
   quaint-nav{@}
   sass-definitions = fs.read-file-sync{path.join{__dirname, "../sass/_common.sass"}, .utf8}
   quaint-sass{@, {= sass-definitions, = variables}}

   if options.use-nav:
      @register-resources with {
         "look-nice/nav.sass" => {
            path = path.join{__dirname, "../sass/nav.sass"}
            contents = true
            type = .sass
            method = .head
         }
      }

   if options.use-side:
      @register-resources with {
         "look-nice/side.sass" => {
            path = path.join{__dirname, "../sass/side.sass"}
            contents = true
            type = .sass
            method = .head
         }
         "look-nice/toc-scroll.js" => {
            path = path.join{__dirname, "../js/toc-scroll.js"}
            contents = true
            type = .js
            method = .head
         }
      }

   @register-resources with {
      "look-nice/main.sass" => {
         path = path.join{__dirname, "../sass/main.sass"}
         contents = true
         type = .sass
         method = .head
      }
      "look-nice/nav.js" => {
         path = path.join{__dirname, "../js/nav.js"}
         contents = true
         type = .js
         method = .head
      }
      "look-nice/nav.js/install" => {
         path = null
         contents = "$$quaintNavFunctionality()"
         type = .js
         method = .body
         inline = true
      }
   }

   @register-resolvers with {
      template = {
         "@minimal" => min-template
         "@nav" => nav-template
      }
   }

   @register-macros with {
      lnnav{engine, body} =
         if body.raw{}.trim{} !== "dump!":
            throw E.quaint-look-nice with
               'lnnav:: macro can only have "dump!" as its body'
         {
            .nav-container-desktop %
               quaint-nav.dump-nav{engine, "leftmost"}
               quaint-nav.dump-nav{engine, "main"}
               quaint-nav.dump-nav{engine, "rightmost"}
            .nav-container-mobile %
               nav.nav-mobile-menu.dropdown %
                  .hamburger %
                     span.icon-bar %
                     span.icon-bar %
                     span.icon-bar %
                  quaint-nav.dump-nav{engine, "mobile-menu", ulonly = true}
               quaint-nav.dump-nav{engine, "mobile"}
            if options.use-side:
               then:
                  quaint-nav.dump-nav{engine, "side"} with {
                     suppress-empty-nav = true
                     wrap{x} = #side % x
                  }
               else: ""
         }
   }



main{*match} =
   {@, options = {=}} when @is-quaint-engine ->
      install{@, options}
   {options = {=}} ->
      ;; options = read-sheets{null, _options}
      {@} -> main{@, options}

provide = main

